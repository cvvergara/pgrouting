
/*PGR-GNU*****************************************************************

Copyright (c) 2018  pgRouting developers
Mail: project@pgrouting.org

------
This program is free software; you can redistribute it and/or modify
it under the terms of the GNU General Public License as published by
the Free Software Foundation; either version 2 of the License, or
(at your option) any later version.
This program is distributed in the hope that it will be useful,
but WITHOUT ANY WARRANTY; without even the implied warranty of
MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. See the
GNU General Public License for more details.
You should have received a copy of the GNU General Public License
along with this program; if not, write to the Free Software
Foundation, Inc., 51 Franklin Street, Fifth Floor, Boston, MA 02110-1301 USA.
 ********************************************************************PGR-GNU*/

BEGIN;

SELECT plan(20);

CREATE TEMP TABLE stop_points(
  id bigint,
  x double precision,
  y double precision
);

INSERT INTO stop_points (id, x, y) VALUES
(1044, -71.141013, 42.431611),
(1111, -71.140838, 42.431231),
(1128, -71.134264, 42.431178),
(1248, -71.135613, 42.430675),
(1483, -71.137247, 42.431289);


PREPARE euclidean_query AS
SELECT * FROM pgr_TSPeuclidean('SELECT id, x,  y FROM stop_points');

CREATE TEMP TABLE stop_points_cost_matrix AS
SELECT DISTINCT ON(a.id, b.id) row_number() OVER() AS id,
a.id AS start_vid, b.id AS end_vid,
ST_Distance(ST_Point(a.x, a.y), ST_Point(b.x, b.y)) AS agg_cost
FROM stop_points AS a CROSS JOIN stop_points AS b WHERE a.id <> b.id;

PREPARE matrix_query AS
SELECT * FROM pgr_TSP($$SELECT * FROM stop_points_cost_matrix$$);

CREATE FUNCTION issue()
RETURNS SETOF TEXT AS
$BODY$
BEGIN

  FOR i IN 1..10 LOOP
    RETURN QUERY
    SELECT lives_ok('euclidean_query', 'euclidean run #' || i::TEXT);
  END LOOP;


  FOR i IN 1..10 LOOP
    RETURN QUERY
    SELECT lives_ok('matrix_query', 'normal run #' || i::TEXT);
  END LOOP;

END;
$BODY$
LANGUAGE plpgsql;

SELECT issue();

SELECT finish();
ROLLBACK;
