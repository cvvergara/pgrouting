
/*PGR-GNU*****************************************************************

Copyright (c) 2018  pgRouting developers
Mail: project@pgrouting.org

------
This program is free software; you can redistribute it and/or modify
it under the terms of the GNU General Public License as published by
the Free Software Foundation; either version 2 of the License, or
(at your option) any later version.
This program is distributed in the hope that it will be useful,
but WITHOUT ANY WARRANTY; without even the implied warranty of
MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. See the
GNU General Public License for more details.
You should have received a copy of the GNU General Public License
along with this program; if not, write to the Free Software
Foundation, Inc., 51 Franklin Street, Fifth Floor, Boston, MA 02110-1301 USA.
 ********************************************************************PGR-GNU*/
BEGIN;

UPDATE edge_table SET cost = sign(cost), reverse_cost = sign(reverse_cost);
SELECT plan(130);

-- TODO check its not used
CREATE OR REPLACE FUNCTION do_test(TEXT, BIGINT, BIGINT)
RETURNS SETOF TEXT AS
$BODY$
BEGIN
  -- directed graph
  RETURN QUERY
  SELECT is_empty(format($$SELECT * from pgr_dijkstra(%1$L, %2$s, %3$s)$$,$1,$2,$3), 'D. One to one ' || $1);
  RETURN QUERY
  SELECT is_empty(format($$SELECT * from pgr_dijkstra(%1$L, ARRAY[%2$s], %3$s)$$,$1,$2,$3), 'D. One to many- ' || $1);
  RETURN QUERY
  SELECT is_empty(format($$SELECT * from pgr_dijkstra(%1$L, %2$s, ARRAY[%3$s])$$,$1,$2,$3), 'D. Many to one- ' || $1);
  RETURN QUERY
  SELECT is_empty(format($$SELECT * from pgr_dijkstra(%1$L, ARRAY[%2$s], ARRAY[%3$s])$$,$1,$2,$3), 'D. Many to Many- ' || $1);
  RETURN QUERY
  SELECT is_empty(format($$SELECT * from pgr_dijkstra(%1$L, 'combination')$$,$1), 'D. Combinations- ' || $1);

  -- undirected graph
  RETURN QUERY
  SELECT is_empty(format($$SELECT * from pgr_dijkstra(%1$L, %2$s, %3$s, false)$$,$1,$2,$3), 'D. One to one ' || $1);
  RETURN QUERY
  SELECT is_empty(format($$SELECT * from pgr_dijkstra(%1$L, ARRAY[%2$s], %3$s, false)$$,$1,$2,$3), 'D. One to many- ' || $1);
  RETURN QUERY
  SELECT is_empty(format($$SELECT * from pgr_dijkstra(%1$L, %2$s, ARRAY[%3$s], false)$$,$1,$2,$3), 'D. Many to one- ' || $1);
  RETURN QUERY
  SELECT is_empty(format($$SELECT * from pgr_dijkstra(%1$L, ARRAY[%2$s], ARRAY[%3$s], false)$$,$1,$2,$3), 'D. Many to Many- ' || $1);
  RETURN QUERY
  SELECT is_empty(format($$SELECT * from pgr_dijkstra(%1$L, 'combination', false)$$,$1), 'D. Combinations- ' || $1);

END;
$BODY$
LANGUAGE plpgsql VOLATILE;


PREPARE combination AS
SELECT 5 AS source, 6 AS target;

-- 0 edges tests

PREPARE edges0 AS
SELECT id, source, target, cost from edges where id>18;

SELECT is_empty('edges0','Edges 0');

SELECT taptest('is_empty','edges0', 7, 11, true);
SELECT taptest('is_empty','edges0', 11, 7, true);
SELECT taptest('is_empty','edges0', 7, 11, false);
SELECT taptest('is_empty','edges0', 11, 7, false);


-- 1 edges tests

-- edge 11->16
PREPARE edges1 AS
SELECT id, source, target, cost from edges where id = 9;

SELECT results_eq('edges1',
'SELECT 9::BIGINT, 11::BIGINT, 16::BIGINT,  1::FLOAT',
'Edges1: 11->16');

SELECT taptest('is_empty','edges1', 7, 11, true);
SELECT taptest('is_empty','edges1', 11, 7, true);
SELECT taptest('is_empty','edges1', 7, 11, false);
SELECT taptest('is_empty','edges1', 11, 7, false);


-- edge 6->7
PREPARE edges2 AS
SELECT id, source, target, cost from edges where id = 4;

SELECT results_eq('edges2',
'SELECT 4::BIGINT, 6::BIGINT, 7::BIGINT,  1::FLOAT',
'Edges2: 6->7');

SELECT taptest('is_empty','edges2', 7, 11, true);
SELECT taptest('is_empty','edges2', 11, 7, true);
SELECT taptest('is_empty','edges2', 7, 11, false);
SELECT taptest('is_empty','edges2', 11, 7, false);

-- edge 7->11
PREPARE edges3 AS
SELECT id, source, target, cost from edges where id = 8;

-- directed graph
SELECT isnt_empty($$SELECT * from pgr_dijkstra('edge_5_6', 5, 6)$$, 'D. One to one- edge_5_6 -> no result');
SELECT isnt_empty($$SELECT * from pgr_dijkstra('edge_5_6', ARRAY[5], 6)$$, 'D. One to many- edge_5_6 -> no result');
SELECT isnt_empty($$SELECT * from pgr_dijkstra('edge_5_6', 5, ARRAY[6])$$, 'D. Many to one- edge_5_6 -> no result');
SELECT isnt_empty($$SELECT * from pgr_dijkstra('edge_5_6', ARRAY[5], ARRAY[6])$$, 'D. Many to Many- edge_5_6 -> no result');
SELECT isnt_empty($$SELECT * from pgr_dijkstra('edge_5_6', 'combination')$$, 'D. Combinations- edge_5_6 -> no result');

-- undirected graph
SELECT isnt_empty($$SELECT * from pgr_dijkstra('edge_5_6', 5, 6, false)$$, 'U. One to one- edge_5_6 -> no result');
SELECT isnt_empty($$SELECT * from pgr_dijkstra('edge_5_6', ARRAY[5], 6, false)$$, 'U. One to many- edge_5_6 -> no result');
SELECT isnt_empty($$SELECT * from pgr_dijkstra('edge_5_6', 5, ARRAY[6], false)$$, 'U. Many to one- edge_5_6 -> no result');
SELECT isnt_empty($$SELECT * from pgr_dijkstra('edge_5_6', ARRAY[5], ARRAY[6], false)$$, 'U. Many to Many- edge_5_6 -> no result');
SELECT isnt_empty($$SELECT * from pgr_dijkstra('edge_5_6', 'combination', false)$$, 'U. Combinations- edge_5_6 -> no result');

SELECT * FROM finish();
ROLLBACK;

